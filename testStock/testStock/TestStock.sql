/******************************************************************************/
/***         Generated by IBExpert 2019.4.14.1 30.09.2022 15:47:15          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;


/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE OR ALTER PROCEDURE CHECK_OREA_STOCK_BY_BARCORDE (
    CLIENT_ID TYPE OF T_ID,
    ST_ID TYPE OF T_ID,
    BARCODE TYPE OF T_BARCODE)
RETURNS (
    ID INTEGER,
    OREA_QTY INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CHECK_SKLAD_STOCK_BY_BARCORDE (
    ST_ID TYPE OF T_ID,
    BARCODE TYPE OF T_BARCODE)
RETURNS (
    ID INTEGER,
    PRIX_QTY INTEGER,
    STOCK_QTY INTEGER)
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE OR ALTER PROCEDURE CHECK_OREA_STOCK_BY_BARCORDE (
    CLIENT_ID TYPE OF T_ID,
    ST_ID TYPE OF T_ID,
    BARCODE TYPE OF T_BARCODE)
RETURNS (
    ID INTEGER,
    OREA_QTY INTEGER)
AS
begin
  id = 1;
  select
    sum(o.qty)
    from orea o
      inner join skl s
            on (o.skl_id = s.skl_id)
      inner join catlogue c
            on (o.catlogue_id = c.catlogue_id)
    where (c.barcode = :barcode) and
          (o.client_id = :client_id) and
          (o.qty > 0) and
          ((:st_id = 0) or (:st_id > 0 and
          s.st_id = :st_id))
  into
    :orea_qty;

  if (:orea_qty is null) then
    orea_qty = 0;
  suspend;
end^


CREATE OR ALTER PROCEDURE CHECK_SKLAD_STOCK_BY_BARCORDE (
    ST_ID TYPE OF T_ID,
    BARCODE TYPE OF T_BARCODE)
RETURNS (
    ID INTEGER,
    PRIX_QTY INTEGER,
    STOCK_QTY INTEGER)
AS
begin
  id = 1;
  select
    sum(skl.qty_free),
    sum(skl.qty_in)
    from skl
      inner join catlogue
            on (catlogue.catlogue_id = skl.catlogue_id)
    where (catlogue.barcode = :barcode) and
          ((:st_id = 0) or ((:st_id > 0) and
          (skl.st_id = :st_id)))
  into
    :stock_qty,
    :prix_qty;

  if (:stock_qty is null) then
    stock_qty = 0;
  if (:prix_qty is null) then
    prix_qty = 0;

  suspend;
end^



SET TERM ; ^



/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


